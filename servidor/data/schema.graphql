 type Cliente {
         id: ID
         nombre: String
         apellido: String
         empresa: String
         emails: [Email]
         edad: Int
         tipo: TipoCliente
         }

   
     
     enum TipoCliente{
         BASICO
         PREMIUM
     }
     enum EstadoPedido{
         PENDIENTE
         COMPLETADO
         CANCELADO
     }




     type Email {
         email: String
     }
    # el producto y el type deben ser iguales
     type Producto{
         id:ID
         nombre:String!
         precio:Float!
         stock:Int!
        
    }

    type ClienteTotal{
        total:Float
        cliente:[Cliente]
    }

  type VendedorTotal{
        total:Float
        vendedor:[Usuario]
    }
    


    #usuarios 
    type Token{
        token:String!
    }
    type Usuario {
        usuario:String
        id:ID
        nombre:String
        rol:String
    }

    #----------------
     type Query {
        getClientes(limite: Int,offset: Int, vendedor:String) : [Cliente]
        getCliente(id:ID!) : Cliente
        totalClientes : String
        
    



        #Productos#
        obtenerProductos(limite: Int,offset: Int, stock:Boolean) :[Producto]
        obtenerProducto(id:ID!):Producto

        #Pedidos
        obtenerPedidos(cliente:String):[Pedido]

         #graficas

        topClientes:[ClienteTotal]
        topVendedores:[VendedorTotal]

        #usuarios
        obtenerUsuario:Usuario



     }

        #pedidos

       type Pedido{
         id:ID
         pedido:[PedidoProducto]
         total:Float
         fecha:String
         cliente: ID
         estado:EstadoPedido

     }

     type PedidoProducto{
         id:ID
         cantidad:Int
     }
    
  

    input EmailInput{
        email:String
    }



    input PedidoInput {
        producto : String
        precio : Int
    }   

     input ClienteInput {
        id: ID
        nombre: String!
        apellido: String!
        empresa: String!
        emails: [EmailInput]
        edad:Int
        tipo: TipoCliente
        pedidos: [PedidoInput]
        vendedor:ID
     } 

     input ProductoInput {
         id:ID
         nombre:String!
         precio:Float!
         stock:Int!
     }

     input PedidoInput{
         id:ID
         pedido:[PedidoProductoInput]
         total:Float
         fecha:String
         cliente: ID
         estado:EstadoPedido
         vendedor:ID

     }

     input PedidoProductoInput{
         id:ID
         cantidad:Int
     }

     type Mutation {
        #Nombre del resolver, input con datos y valor que retorna
         crearCliente (input : ClienteInput): Cliente  
         actualizarCliente(input : ClienteInput): Cliente 
         eliminarCliente (id: ID!) : String

        #productos

        nuevoProducto(input:ProductoInput): Producto 
        actualizarProducto(input:ProductoInput):Producto
        eliminarProducto (id: ID!) : String


        #Pedidos

        nuevoPedido(input:PedidoInput):Pedido
        actualizarEstado(input:PedidoInput):String

      #usuarios
        crearUsuario (usuario:String!,nombre:String!,password:String!,rol:String!):String
        autenticarUsuario(usuario:String!,password:String!):Token
        
      } 